spring.application.name=welfaring

# Database Configuration
spring.datasource.url=jdbc:postgresql://dpg-d3u4c4bipnbc738ludg0-a.oregon-postgres.render.com:5432/welfaring_db
spring.datasource.username=welfaring_db_user
spring.datasource.password=TjOEEI8h1HCYGoWiTqwf4LPJndRopJ6e
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false

# OpenAI API Configuration
openai.api.key=${OPENAI_API_KEY}
openai.api.url=https://api.openai.com/v1/chat/completions
openai.api.model=gpt-3.5-turbo

# Server Configuration
server.port=${PORT:8080}
server.servlet.context-path=/api

# Spring Profile (Render Docker용)
spring.profiles.active=${SPRING_PROFILES_ACTIVE:docker}

# CORS Configuration
spring.web.cors.allowed-origins=*
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# OAuth 2.0 설정
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/api/login/oauth2/code/google

spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_CLIENT_ID}
spring.security.oauth2.client.registration.kakao.client-secret=${KAKAO_CLIENT_SECRET}
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email
spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8080/api/login/oauth2/code/kakao

# OAuth Provider 설정
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=id

spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# JWT 설정
jwt.secret=${JWT_SECRET:your-secret-key-here-must-be-at-least-256-bits-long}
jwt.expiration=86400000
jwt.refresh-expiration=604800000

# 세션 설정 (선택사항)
spring.session.store-type=jdbc
spring.session.jdbc.initialize-schema=always

# Logging Configuration
logging.level.com.demo.welfaring=INFO
logging.level.org.springframework.web=INFO
logging.level.org.springframework.security=DEBUG
